using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using DataAsset.Core;
using UnityEditor;
using UnityEngine;

namespace DataAsset.Editor
{
      public static class DataAssetKeyGenerator
      {
            private const string GeneratedKeysPath = "Assets/DataAsset/Generated";

            [MenuItem("Tools/DataAsset/Generate All Keys")]
            public static void GenerateAllKeys()
            {
                  Directory.CreateDirectory(GeneratedKeysPath);

                  string[] guids = AssetDatabase.FindAssets($"t:{nameof(Core.DataAsset)}");

                  foreach (string guid in guids)
                  {
                        GenerateKeysForAsset(guid);
                  }

                  AssetDatabase.Refresh();
            }

            private static void GenerateKeysForAsset(string guid)
            {
                  string assetPath = AssetDatabase.GUIDToAssetPath(guid);
                  var dataAsset = AssetDatabase.LoadAssetAtPath<DataAsset.Core.DataAsset>(assetPath);

                  if (dataAsset == null)
                  {
                        return;
                  }

                  var keys = new List<string>();
                  var serializedAsset = new SerializedObject(dataAsset);
                  SerializedProperty dataListProperty = serializedAsset.FindProperty("dataList");

                  for (int i = 0; i < dataListProperty.arraySize; i++)
                  {
                        SerializedProperty element = dataListProperty.GetArrayElementAtIndex(i);

                        if (element.managedReferenceValue is DataObject dataObject && !string.IsNullOrEmpty(dataObject.dataName))
                        {
                              keys.Add(dataObject.dataName);
                        }
                  }

                  if (keys.Count == 0)
                  {
                        return;
                  }

                  keys.Sort();

                  string className = SanitizeForIdentifier(Path.GetFileNameWithoutExtension(assetPath)) + "_Keys";
                  var contentBuilder = new StringBuilder();

                  contentBuilder.AppendLine("// ----- AUTO-GENERATED FILE -----");
                  contentBuilder.AppendLine("//     Do not edit this file manually.");
                  contentBuilder.AppendLine("// -----------------------------");
                  contentBuilder.AppendLine($"public static class {className}");
                  contentBuilder.AppendLine("{");

                  foreach (string key in keys)
                  {
                        string variableName = SanitizeForIdentifier(key);
                        contentBuilder.AppendLine($"    public const string {variableName} = \"{key}\";");
                  }

                  contentBuilder.AppendLine("}");

                  string filePath = Path.Combine(GeneratedKeysPath, className + ".cs");
                  string newContent = contentBuilder.ToString();

                  if (File.Exists(filePath))
                  {
                        string currentContent = File.ReadAllText(filePath);

                        if (currentContent == newContent)
                        {
                              return;
                        }
                  }

                  File.WriteAllText(filePath, newContent);
                  Debug.Log($"Generated/Updated keys for: {className}");
            }

            private static string SanitizeForIdentifier(string input)
            {
                  return input.Replace(" ", "_", StringComparison.Ordinal).Replace("-", "_", StringComparison.Ordinal).Replace(".", "_", StringComparison.Ordinal);
            }
      }
}